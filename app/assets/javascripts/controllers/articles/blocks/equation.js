// Equation block

$(document).on('turbolinks:load', function() {
	
	
		var VariableInputField = function(container){
			var notation, description;
			var inputs;
			var updateCallbacks = [];
			var deleteCallbacks = [];
			var self = this;
			var input_template = "<div class='variable_input'><input type='text' name='notation' placeholder='Variable (Asciimath)'> = <input type='text' name='description' placeholder='Variable Description'><button type='button'>Remove</button></div>";
	
			//adds to a list of callbacks made before the DOM elements generated by this object are removed
			this.addDeleteCallback = function(callback){
				deleteCallbacks.push(callback);
			}
			
			//sends the callbacks when this object has its inputs updated
			var notifyDelete = function(){
				for (i=0;i<deleteCallbacks.length;i++)
					deleteCallbacks[i]();
			}
			
			//adds to a list of callbacks made before the DOM elements generated by this object are removed
			this.addUpdateCallback = function(callback){
				updateCallbacks.push(callback);
			}
			
			//sends the callbacks when one of the inputs change
			var notifyUpdate = function(){
				for (i=0;i<updateCallbacks.length;i++)
					updateCallbacks[i]();
			}
			

			//returns a reference to the variable
			this.getNotation = function(){
				return notation;
			}
			
			this.getDescription = function(){
				return description;
			}
			
			//add the inputs to targeted container and set inputs equal to the last input_template elements inserted
			inputs = container.append(input_template).children().last();
						
			//Update this variable's attributes when the user makes a change
			inputs.find("[name='notation']").change(function(){
				notation = $(this).val();
				notifyUpdate();
			});
			inputs.find("[name='description']").change(function(){
				description = $(this).val();
				notifyUpdate();
			});
			

			inputs.find("button").click(function(e){
				e.preventDefault();
			   //let subscribers know that this object is going to be deleted
				notifyDelete();
				//destroy all DOM elements created
				inputs.remove();
			});
			
		}

		
		//Appends an equation to element and renders it as MathJax
		var addMath = function(elem, equation) {
			//create element which indicates that mathjax knows contains math
			var math_script = $("<script type='math/asciimath'>").text(equation);

			//Queue these functions to be called when mathjax is ready
			MathJax.Hub.queue.Push(
				function() {
					$(elem).html(math_script);
				},
				function() {
					$(elem).css("visibility", "hidden");
				}, ["Typeset", MathJax.Hub, elem],
				function() {
					$(elem).css("visibility", "visible");
				}
			);
		}



    SirTrevor.Blocks.Equation = (function() {
	
		//Sent to the server when submitted
		var block_data = {
            equation: null,
            label: null,
			variables: {}
        }
	
		//References to DOM elements in this equation block
		var equation_area, variable_area, variable_input_area, label_area, equation_paste, label_paste; 

        return SirTrevor.Block.extend({

            type: "equation",
            title: function() {
                return 'Equation';
            },
			//icon_name: 'equation',
            icon_name: 'quote',
            pastable: true,
            formatable: false,
            textable: false,


            editorHTML: function() {
                return "<div class='st-equation-block' contenteditable='false' style='text-align:center'> \
							<div class='equation'></div> \
							<p class='equation-label'></p> \
							<div class='equation-variables'></div> \
						</div> \
						<div> \
							<input type=\"text\" class=\"st-paste-block st-label-paste\" placeholder='Equation Label'> \
							<input type=\"text\" class=\"st-paste-block st-equation-paste\" placeholder='Enter Equation Here'> \
						</div> \
						<div> \
							<button class='add-variables' type='button'>Add Variable Description</button> \
							<div class='variable-inputs'></div> \
						</div>";
						
            },

            paste_options: {
                html: null
            },


            onBlockRender: function() {
                var this_block = this;
				var inputs;
				var variable_input_count = 0;

				//set-up equation input to update the MathJax preview when changed
                equation_area = $(this.el).find(".equation");
                equation_area.removeAttr("contenteditable");
                equation_paste = $(this.el).find(".st-equation-paste");
                equation_paste.on("change", function() {
					var equation = equation_paste.val();
                    addMath(equation_area[0], equation);
					this_block.setEquation(equation);
                });

				//set-up label input to update the label in the preview when changed
                label_area = $(this.el).find(".equation-label");
                label_paste = $(this.el).find(".st-label-paste");
                label_paste.on("change", function() {
					var label = label_paste.val();
                    this_block.setLabel(label);
                });
				
				variable_area = $(this.el).find(".equation-variables");
				variable_input_area = $(this.el).find(".variable-inputs");
				$(this.el).find(".add-variables").click(function(e){
					e.preventDefault();
					
					//keep track of which variable we are storing in the object to be sent to the server
					var index = variable_input_count++;
					//initially this variable has no data
					var var_obj = {variable:null,description:null};
					//store a reference to this var_obj
					block_data.variables[index] = var_obj;
					
					var variable_preview = $('<p/>', {
						'class':'equation-variable',
						'style':'display:none',
						'html':"<span class='equation'></span> = <span class='equation-description'></span>",
						'change': function(){ 
							var equation_span = $(this).find('.equation');
							$(this).css('display','block');
							addMath(equation_span[0],equation_span.text());
						}
					}).appendTo(variable_area);
					
					//appends a new set of inputs to variable_area where a variable can be defined
					var variable_inputs = new VariableInputField(variable_input_area);
					
					
					variable_inputs.addUpdateCallback(function(){
						//get the value the user entered as the variable/description
						var desc = variable_inputs.getDescription();
						var notation = variable_inputs.getNotation();
						
						//block_data sent to server will be updated because it holds a reference to this var_obj
						var_obj.variable = notation;
						var_obj.description = desc;
						
						//update the preview of the variable
						variable_preview.find('.equation').text(notation);
						variable_preview.find('.equation-description').text(desc);
						//trigger it's event handler
						variable_preview.change();
					});
					
					variable_inputs.addDeleteCallback(function(){					
						//remove the variable from the preview
						variable_preview.remove();
						
						//user deleted the variable/description so we don't want to send it to the server
						delete block_data.variables[index];
					});
				});
				
				

            },
						
			setEquation: function(equation){
				//update the data to be sent to the server
				block_data.equation = equation;
				this.setData(block_data);
			},


            setLabel: function(label) {
                label_area.text(label);

                //update the data to be sent to the server
                block_data.label = label;
                this.setData(label);
            },


            onContentPasted: function() {
                //this should trigger the "change" event for whichever element they pasted in
                $(this.el).find(".st-paste-block").blur();
            }

        })
    })(jQuery);
});