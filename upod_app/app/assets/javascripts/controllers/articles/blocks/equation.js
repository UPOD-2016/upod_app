// Equation block

$(document).on('turbolinks:load', function() {

		//Class encapsulating a set of inputs for entering in new variables and their description
		var VariableInputField = function(container){
			var variable, description;
			var inputs;
			var updateCallbacks = [];
			var deleteCallbacks = [];
			var self = this;
			var input_template = "<div class='variable_input'> \
				<input type='text' name='variable' class='st-required' placeholder='Variable (Asciimath)'> \
				<span>=</span> \
				<input type='text' name='description' class='st-required' placeholder='Variable Description'> \
				<button type='button'>Remove</button> \
			</div>";
	
			//adds to a list of callbacks made before the DOM elements generated by this object are removed
			this.addDeleteCallback = function(callback){
				deleteCallbacks.push(callback);
			}
			
			//sends the callbacks when this object has its inputs updated
			var notifyDelete = function(){
				for (i=0;i<deleteCallbacks.length;i++)
					deleteCallbacks[i]();
			}
			
			//adds to a list of callbacks made before the DOM elements generated by this object are removed
			this.addUpdateCallback = function(callback){
				updateCallbacks.push(callback);
			}
			
			//sends the callbacks when one of the inputs change
			var notifyUpdate = function(){
				for (i=0;i<updateCallbacks.length;i++)
					updateCallbacks[i]();
			}
			

			//returns a reference to the variable
			this.getVariable = function(){
				return variable;
			}
			
			this.setVariable = function(n) {
				variable = n;
				inputs.find("[name='variable']").val(n);
			}
			
			this.getDescription = function(){
				return description;
			}
			
			this.setDescription = function(d){
				description = d;
				inputs.find("[name='description']").val(d);
			}
			
			//add the inputs to targeted container and set inputs equal to the last input_template elements inserted
			inputs = container.append(input_template).children().last();
						
			//Update this variable's attributes when the user makes a change
			inputs.find("[name='variable']").change(function(){
				variable = $(this).val();
				notifyUpdate();
			});
			inputs.find("[name='description']").change(function(){
				description = $(this).val();
				notifyUpdate();
			});
			

			inputs.find("button").click(function(e){
				e.preventDefault();
			   //let subscribers know that this object is going to be deleted
				notifyDelete();
				//destroy all DOM elements created
				inputs.remove();
			});
			
		}

		
		//Appends an equation to element and renders it as MathJax
		var addMath = function(elem, equation) {
			//create element which indicates that mathjax knows contains math
			var math_script = $("<script type='math/asciimath'>").text(equation);

			//Queue these functions to be called when mathjax is ready
			MathJax.Hub.queue.Push(
				function() {
					$(elem).html(math_script);
				},
				function() {
					$(elem).css("visibility", "hidden");
				}, 
				["Typeset", MathJax.Hub, elem],
				function() {
					$(elem).css("visibility", "visible");
				}
			);
		}



    SirTrevor.Blocks.Equation = (function() {
		//References to DOM elements in this equation block
		var equation_preview, variable_preview, variable_inputs, label_preview, equation_input, label_input;
		
		//Keep track of variable objects
		var variables = [];

        return SirTrevor.Block.extend({

            type: "equation",
            title: function() {
                return 'Equation';
            },
			//icon_name: 'equation',
            icon_name: 'quote',
            pastable: true,
            formatable: false,
            textable: false,
            paste_options: { html: null },
			
			//Extracts and sets data that will be sent to the server
			toData: function(){
				var objData = {};
				objData.equation = equation_input.val();
				objData.label = label_input.val();
				objData.variables = $.extend({},variables) //maps [Object,Object] to {0:Object,1:Object}
				
				this.setData(objData);
			},
			
			//Will populate the block/fields with pre-loaded data
			setBlock: function(data){
				equation_input.val(data.equation);
				addMath(equation_preview[0],data.equation);
				
				label_input.val(data.label);
				label_preview.text(data.label);
				
				var variables = data.variables;
				for (i in Object.keys(variables)){
					this.addVariable(variables[i].variable,variables[i].description);
				}
			},

            editorHTML: function() {
                return "<div class='st-equation-block' contenteditable='false' style='text-align:center'> \
							<div class='equation'></div> \
							<p class='equation-label'></p> \
							<div class='equation-variables'></div> \
						</div> \
						<div> \
							<input type=\"text\" class=\"st-paste-block st-label-paste\" placeholder='Equation Label'> \
							<input type=\"text\" class=\"st-paste-block st-equation-paste st-required\" placeholder='Enter Equation Here'> \
						</div> \
						<div> \
							<button class='add-variables' type='button'>Add Variable Description</button> \
							<div class='variable-inputs'></div> \
						</div>";
						
            },

            onBlockRender: function() {
                var this_block = this;
				
				//set-up equation input to update the MathJax preview when changed
                equation_preview = $(this.el).find(".equation");
                equation_preview.removeAttr("contenteditable");
                equation_input = $(this.el).find(".st-equation-paste");
                equation_input.on("change", function() {
					this.setEquation(equation_input.val());
                }.bind(this));

				//set-up label input to update the label in the preview when changed
                label_preview = $(this.el).find(".equation-label");
                label_input = $(this.el).find(".st-label-paste");
                label_input.on("change", function() {
					var label = label_input.val();
					this.setLabel(label);
                }.bind(this));
				
				variable_preview = $(this.el).find(".equation-variables");
				variable_inputs = $(this.el).find(".variable-inputs");
				
				//Call addVariable with access to functions available in this_block
				$(this.el).find(".add-variables").click(function(){
					this.addVariable();
				}.bind(this));
				
				//Check if data has been loaded by sir trevor using the loadData method
				var preloaded_data = this.getBlockData();
				if (!jQuery.isEmptyObject(preloaded_data)){
					//add data to inputs and preview area using preloaded_data
					this.setBlock(preloaded_data);
				}
            },
			
			addVariable: function(variable, description){		
				//optionally this variable can be created with initial values
				var variable_obj = {variable:variable,description:description};
	
				//appends a new set of inputs to variable_input_area where a variable can be defined
				var variable_field = new VariableInputField(variable_inputs);
				
				//store a reference to this var_obj
				variables.push(variable_obj);
				
				//update the data sent to the server
				this.toData();
				
				//Create the element to display the variable and append it to DOM
				var variable_preveiw_el = $('<p/>', {
					'class':'equation-variable',
					'style':'display:none',
					'html':"<span class='equation'></span> = <span class='equation-description'></span>",
					'change': function(){ 
						//Will need to manually invoke .change() whenever equation changes to have mathjax typeset it again
						var equation_span = $(this).find('.equation');
						addMath(equation_span[0],equation_span.text());
						$(this).css('display','block');
					}
				});
				
				//If variable/description parameters were sent then we load in the values to the preview and input area
				if (variable && description){
					variable_field.setVariable(variable);
					variable_field.setDescription(description);
					variable_preveiw_el.find('.equation').text(variable);
					variable_preveiw_el.find('.equation-description').text(description);
					//trigger event handler so mathjax can render equation
					variable_preveiw_el.change();
				}
				
				//Can now add variable elements to the DOM
				variable_preveiw_el.appendTo(variable_preview);
				
				//Called whenever the user changes the variable/description fields
				variable_field.addUpdateCallback(function(){
					//get the value the user entered as the variable/description
					var desc = variable_field.getDescription();
					var v = variable_field.getVariable();
					
					//the global variable array is updated because it holds a reference to this variable_obj
					variable_obj.variable = v;
					variable_obj.description = desc;
					
					//update the preview of the variable
					variable_preveiw_el.find('.equation').text(v);
					variable_preveiw_el.find('.equation-description').text(desc);
					//trigger event handler so mathjax can render equation
					variable_preveiw_el.change();
					
					//update the data sent to the server
					this.toData();
				}.bind(this));
				
				variable_field.addDeleteCallback(function(){					
					//remove the variable from the preview
					variable_preveiw_el.remove();
					
					//user deleted the variable/description so we don't want to send it to the server
					var index = variables.indexOf(variable_obj);
					if (index != -1){
						//remove this object from array
						variables.splice(index,1);
						delete variable_obj;
					}
					//update the data sent to the server
					this.toData();
				}.bind(this));
			},
			
			setEquation: function(equation){
				addMath(equation_preview[0], equation);
				this.toData();
			},
			
			setLabel: function(label_text){
			    label_preview.text(label_text);
				this.toData();
			},

            onContentPasted: function() {
                //this should trigger the "change" event for whichever element they pasted in
                $(this.el).find(".st-paste-block").blur();
            }

        })
    })(jQuery);
});